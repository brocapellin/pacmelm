Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values)
   return _elm.Main.values;
   var _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   _A = _N.Array.make(_elm),
   _E = _N.Error.make(_elm),
   $moduleName = "Main";
   var Basics = Elm.Basics.make(_elm);
   var Color = Elm.Color.make(_elm);
   var Graphics = Graphics || {};
   Graphics.Collage = Elm.Graphics.Collage.make(_elm);
   var Graphics = Graphics || {};
   Graphics.Element = Elm.Graphics.Element.make(_elm);
   var List = Elm.List.make(_elm);
   var Maybe = Elm.Maybe.make(_elm);
   var Native = Native || {};
   Native.Json = Elm.Native.Json.make(_elm);
   var Native = Native || {};
   Native.Ports = Elm.Native.Ports.make(_elm);
   var Signal = Elm.Signal.make(_elm);
   var String = Elm.String.make(_elm);
   var Text = Elm.Text.make(_elm);
   var Time = Elm.Time.make(_elm);
   var Window = Elm.Window.make(_elm);
   var _op = {};
   var renderResult = function (state) {
      return Text.asText(state.x.z);
   };
   var newState = F2(function (moment,
   state) {
      return _U.replace([["x"
                         ,{_: {}
                          ,z: Basics.floor(moment)}]],
      state);
   });
   var initialState = {_: {}
                      ,x: {_: {},z: 0}
                      ,y: 0};
   var world = A2(Signal.foldp,
   newState,
   initialState)(Time.every(1.0));
   var main = A2(Signal._op["<~"],
   renderResult,
   world);
   _elm.Main.values = {_op: _op
                      ,main: main
                      ,world: world
                      ,initialState: initialState
                      ,newState: newState
                      ,renderResult: renderResult};
   return _elm.Main.values;
};